# プロジェクト概要: 委託在庫管理アプリケーション「ZAIKO」

## 1. 目的
自動車整備工場に委託している部品の在庫をリアルタイムで管理し、業務効率化と在庫切れリスクの低減を目指すシステム。部品商（管理者）と整備工場（ユーザー）の両方が利用する。

## 2. 現在のシステム構成 (2025/10/11時点)

- **バックエンド:**
  - **実行環境:** Raspberry Pi 4上のDockerコンテナ
  - **フレームワーク:** Node.js / Express.js
  - **データベース:** SQLite3 (ファイルベースで管理が容易)

- **フロントエンド:**
  - **技術:** HTML, CSS, JavaScript (Vanilla JS)
  - **UI:** 管理者向け、整備工場ユーザー向けの2種類のWebインターフェースを提供。

- **外部アクセスとURL動的更新の仕組み:**
  1. **トンネリング:** Raspberry Pi上で動作する`ngrok`が、ローカルサーバー(ポート3000)をインターネットに公開する。
  2. **URL自動更新:** 同じくRaspberry Pi上で定期実行されるPythonスクリプト (`update_ngrok_url.py`) が、ngrokのAPIから現在の公開URLを取得する。
  3. **URLの中央管理:** Pythonスクリプトは、取得したURLを`Supabase`のデータベースに保存する。
  4. **安定したアクセスポイント:** ユーザーがアクセスするランディングページ (`landing-page/index.html`) は`Vercel`にデプロイされている。このページは、Supabaseから最新のngrok URLを動的に取得し、利用者（整備工場）を正しいサーバーへ誘導する。

- **CI/CD:**
  - **ソースコード管理:** GitHub
  - **自動テスト:** GitHub Actionsにより、プッシュ時にJestを用いたAPIの自動テストが実行される。

## 3. 実装済みの主な機能

- **認証:**
  - ログイン機能 (bcryptによるパスワードハッシュ化)
  - `管理者` / `整備工場ユーザー` のロール（役割）に応じたアクセス制御

- **管理者機能:**
  - **マスターデータ管理 (CRUD):** 工場、部品、カテゴリー、ユーザー、従業員
  - **在庫管理:** 全工場の在庫情報の一元管理、棚卸しによる在庫数調整、補充記録
  - **CSV連携:** 部品マスタと在庫情報の一括インポート・エクスポート
  - **レポート:** 発注推奨リストの生成、詳細な部品使用履歴の検索

- **整備工場ユーザー機能:**
  - 自工場の在庫リアルタイム確認
  - 部品の使用記録とキャンセル機能
  - 月ごとの使用履歴の確認
  - 従業員の管理

## 4. 次のステップ
- `MANUAL.md`に外部アクセス構成のセットアップ手順を追記する。
- `development_plan.md`と`requirements_definition.md`を現状に合わせて更新する。
